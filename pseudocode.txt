pseudocode for total.


Dependencies:
    Bio
        Align: for align
        SeqIO: for reading fasta / fastq files

    click
        for command line interface working.
        only works in the main

    csv, xlsxwriter
        for writing excel-type log file

    datetime, os, gzip, typing



main.py __init__:

    reference_list = get_references_from_file(REF_SET_ADDRESS)

    data_file_list = get_file_list(DATA_ADDRESS)

    all_indel_counter_list_list = []


    for data_file in data_file_list:

        line_set_list = []

        for data_read in data_file =
            line_set = get_best_line_set(data_read, reference_list)
            line_set_list.append(line_set)

        indel_counter_list = []

        for reference in reference_list:
            indel_counter = new InDel_Counter_For_Genotype(data_file, reference)
            indel_counter_list.append(indel_counter)

        for line_set in line_set_list:
            for indel_counter in indel_counter_list:
                if line_set.ref_name == indel_counter.ref_name:
                    indel_counter.count(line_set)


        line_set.sort()

        for indel_counter in indel_counter_list:
            counter_line_set_list = []

            for line_set in line_set_list:
                if line_set.ref_name == indel_counter.ref_name:
                    counter_line_set_list.append(line_set)

            write_sub_log(counter_line_set_list, indel_counter)

        all_indel_counter_list_list.append(indel_counter_list)

        # end for each file

    write_main_log(all_indel_counter_list_list)
    write_main_csv_log(all_indel_counter_list_list, reference_list)
    write_raw_data_log(all_indel_counter_list_list)

    # end





fun get_best_line_set(data_read, reference_list):
    possible_line_set_list = []

    for reference in reference_list:
        possible_line_set = Line_Set(data_read, reference)
        possible_line_set_list.append(possible_line_set)

    best_line_set = possible_line_set_list[0]

    for possible_line_set in possible_line_set_list:
        if best_line_set.score < possible_line_set:
            best_line_set = possible_line_set

    return best_line_set



class Line_Set:

    def init(data_read, reference):



